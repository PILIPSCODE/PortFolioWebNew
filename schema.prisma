datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Project {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String?
  img         String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  technology Technolgy[]
}

model Technolgy {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  technology String?
  link       String?

  project   Project @relation(fields: [projectId], references: [id])
  projectId String  @db.ObjectId
}

model Service {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String?
  img         String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Blog {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  Title       String?
  img         String?
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Comment Chat[]
}

model Chat {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  message   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project   Blog   @relation(fields: [projectId], references: [id])
  projectId String @db.ObjectId

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
}

model User {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  name  String?
  email String? @unique
  image String?
  admin Boolean? @default(false)
  chat          Chat[]
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updateAt      DateTime  @updatedAt

  accounts Account[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}
